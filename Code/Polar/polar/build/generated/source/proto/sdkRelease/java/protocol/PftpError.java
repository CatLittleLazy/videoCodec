// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pftp_error.proto

package protocol;

public final class PftpError {
  private PftpError() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   * Error codes.
   * </pre>
   *
   * Protobuf enum {@code protocol.PbPFtpError}
   */
  public enum PbPFtpError
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * Succeeding or no error 
     * </pre>
     *
     * <code>OPERATION_SUCCEEDED = 0;</code>
     */
    OPERATION_SUCCEEDED(0),
    /**
     * <code>REBOOTING = 1;</code>
     */
    REBOOTING(1),
    /**
     * <code>TRY_AGAIN = 2;</code>
     */
    TRY_AGAIN(2),
    /**
     * <pre>
     * Host errors 
     * </pre>
     *
     * <code>UNIDENTIFIED_HOST_ERROR = 100;</code>
     */
    UNIDENTIFIED_HOST_ERROR(100),
    /**
     * <code>INVALID_COMMAND = 101;</code>
     */
    INVALID_COMMAND(101),
    /**
     * <code>INVALID_PARAMETER = 102;</code>
     */
    INVALID_PARAMETER(102),
    /**
     * <code>NO_SUCH_FILE_OR_DIRECTORY = 103;</code>
     */
    NO_SUCH_FILE_OR_DIRECTORY(103),
    /**
     * <code>DIRECTORY_EXISTS = 104;</code>
     */
    DIRECTORY_EXISTS(104),
    /**
     * <code>FILE_EXISTS = 105;</code>
     */
    FILE_EXISTS(105),
    /**
     * <code>OPERATION_NOT_PERMITTED = 106;</code>
     */
    OPERATION_NOT_PERMITTED(106),
    /**
     * <code>NO_SUCH_USER = 107;</code>
     */
    NO_SUCH_USER(107),
    /**
     * <code>TIMEOUT = 108;</code>
     */
    TIMEOUT(108),
    /**
     * <pre>
     * Device errors 
     * </pre>
     *
     * <code>UNIDENTIFIED_DEVICE_ERROR = 200;</code>
     */
    UNIDENTIFIED_DEVICE_ERROR(200),
    /**
     * <code>NOT_IMPLEMENTED = 201;</code>
     */
    NOT_IMPLEMENTED(201),
    /**
     * <code>SYSTEM_BUSY = 202;</code>
     */
    SYSTEM_BUSY(202),
    /**
     * <code>INVALID_CONTENT = 203;</code>
     */
    INVALID_CONTENT(203),
    /**
     * <code>CHECKSUM_FAILURE = 204;</code>
     */
    CHECKSUM_FAILURE(204),
    /**
     * <code>DISK_FULL = 205;</code>
     */
    DISK_FULL(205),
    /**
     * <code>PREREQUISITE_NOT_MET = 206;</code>
     */
    PREREQUISITE_NOT_MET(206),
    /**
     * <code>INSUFFICIENT_BUFFER = 207;</code>
     */
    INSUFFICIENT_BUFFER(207),
    /**
     * <code>WAIT_FOR_IDLING = 208;</code>
     */
    WAIT_FOR_IDLING(208),
    /**
     * <pre>
     * 300-399 reserved for communication interface specific errors 
     * </pre>
     *
     * <code>BATTERY_TOO_LOW = 209;</code>
     */
    BATTERY_TOO_LOW(209),
    ;

    /**
     * <pre>
     * Succeeding or no error 
     * </pre>
     *
     * <code>OPERATION_SUCCEEDED = 0;</code>
     */
    public static final int OPERATION_SUCCEEDED_VALUE = 0;
    /**
     * <code>REBOOTING = 1;</code>
     */
    public static final int REBOOTING_VALUE = 1;
    /**
     * <code>TRY_AGAIN = 2;</code>
     */
    public static final int TRY_AGAIN_VALUE = 2;
    /**
     * <pre>
     * Host errors 
     * </pre>
     *
     * <code>UNIDENTIFIED_HOST_ERROR = 100;</code>
     */
    public static final int UNIDENTIFIED_HOST_ERROR_VALUE = 100;
    /**
     * <code>INVALID_COMMAND = 101;</code>
     */
    public static final int INVALID_COMMAND_VALUE = 101;
    /**
     * <code>INVALID_PARAMETER = 102;</code>
     */
    public static final int INVALID_PARAMETER_VALUE = 102;
    /**
     * <code>NO_SUCH_FILE_OR_DIRECTORY = 103;</code>
     */
    public static final int NO_SUCH_FILE_OR_DIRECTORY_VALUE = 103;
    /**
     * <code>DIRECTORY_EXISTS = 104;</code>
     */
    public static final int DIRECTORY_EXISTS_VALUE = 104;
    /**
     * <code>FILE_EXISTS = 105;</code>
     */
    public static final int FILE_EXISTS_VALUE = 105;
    /**
     * <code>OPERATION_NOT_PERMITTED = 106;</code>
     */
    public static final int OPERATION_NOT_PERMITTED_VALUE = 106;
    /**
     * <code>NO_SUCH_USER = 107;</code>
     */
    public static final int NO_SUCH_USER_VALUE = 107;
    /**
     * <code>TIMEOUT = 108;</code>
     */
    public static final int TIMEOUT_VALUE = 108;
    /**
     * <pre>
     * Device errors 
     * </pre>
     *
     * <code>UNIDENTIFIED_DEVICE_ERROR = 200;</code>
     */
    public static final int UNIDENTIFIED_DEVICE_ERROR_VALUE = 200;
    /**
     * <code>NOT_IMPLEMENTED = 201;</code>
     */
    public static final int NOT_IMPLEMENTED_VALUE = 201;
    /**
     * <code>SYSTEM_BUSY = 202;</code>
     */
    public static final int SYSTEM_BUSY_VALUE = 202;
    /**
     * <code>INVALID_CONTENT = 203;</code>
     */
    public static final int INVALID_CONTENT_VALUE = 203;
    /**
     * <code>CHECKSUM_FAILURE = 204;</code>
     */
    public static final int CHECKSUM_FAILURE_VALUE = 204;
    /**
     * <code>DISK_FULL = 205;</code>
     */
    public static final int DISK_FULL_VALUE = 205;
    /**
     * <code>PREREQUISITE_NOT_MET = 206;</code>
     */
    public static final int PREREQUISITE_NOT_MET_VALUE = 206;
    /**
     * <code>INSUFFICIENT_BUFFER = 207;</code>
     */
    public static final int INSUFFICIENT_BUFFER_VALUE = 207;
    /**
     * <code>WAIT_FOR_IDLING = 208;</code>
     */
    public static final int WAIT_FOR_IDLING_VALUE = 208;
    /**
     * <pre>
     * 300-399 reserved for communication interface specific errors 
     * </pre>
     *
     * <code>BATTERY_TOO_LOW = 209;</code>
     */
    public static final int BATTERY_TOO_LOW_VALUE = 209;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PbPFtpError valueOf(int value) {
      return forNumber(value);
    }

    public static PbPFtpError forNumber(int value) {
      switch (value) {
        case 0: return OPERATION_SUCCEEDED;
        case 1: return REBOOTING;
        case 2: return TRY_AGAIN;
        case 100: return UNIDENTIFIED_HOST_ERROR;
        case 101: return INVALID_COMMAND;
        case 102: return INVALID_PARAMETER;
        case 103: return NO_SUCH_FILE_OR_DIRECTORY;
        case 104: return DIRECTORY_EXISTS;
        case 105: return FILE_EXISTS;
        case 106: return OPERATION_NOT_PERMITTED;
        case 107: return NO_SUCH_USER;
        case 108: return TIMEOUT;
        case 200: return UNIDENTIFIED_DEVICE_ERROR;
        case 201: return NOT_IMPLEMENTED;
        case 202: return SYSTEM_BUSY;
        case 203: return INVALID_CONTENT;
        case 204: return CHECKSUM_FAILURE;
        case 205: return DISK_FULL;
        case 206: return PREREQUISITE_NOT_MET;
        case 207: return INSUFFICIENT_BUFFER;
        case 208: return WAIT_FOR_IDLING;
        case 209: return BATTERY_TOO_LOW;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PbPFtpError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PbPFtpError> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PbPFtpError>() {
            @java.lang.Override
            public PbPFtpError findValueByNumber(int number) {
              return PbPFtpError.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return PbPFtpErrorVerifier.INSTANCE;
    }

    private static final class PbPFtpErrorVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new PbPFtpErrorVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return PbPFtpError.forNumber(number) != null;
            }
          };

    private final int value;

    private PbPFtpError(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:protocol.PbPFtpError)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
