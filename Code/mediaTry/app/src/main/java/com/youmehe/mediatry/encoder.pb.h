// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: encoder.proto

#ifndef PROTOBUF_encoder_2eproto__INCLUDED
#define PROTOBUF_encoder_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_encoder_2eproto();
void protobuf_InitDefaults_encoder_2eproto();
void protobuf_AssignDesc_encoder_2eproto();
void protobuf_ShutdownFile_encoder_2eproto();

class Encoders;
class Encoders_alias;
class Encoders_limit;
class Encoders_mediaCodec;

// ===================================================================

class Encoders_alias : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Encoders.alias) */ {
 public:
  Encoders_alias();
  virtual ~Encoders_alias();

  Encoders_alias(const Encoders_alias& from);

  inline Encoders_alias& operator=(const Encoders_alias& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Encoders_alias& default_instance();

  static const Encoders_alias* internal_default_instance();

  void Swap(Encoders_alias* other);

  // implements Message ----------------------------------------------

  inline Encoders_alias* New() const { return New(NULL); }

  Encoders_alias* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Encoders_alias& from);
  void MergeFrom(const Encoders_alias& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Encoders_alias* other);
  void UnsafeMergeFrom(const Encoders_alias& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Encoders.alias)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_encoder_2eproto_impl();
  friend void  protobuf_AddDesc_encoder_2eproto_impl();
  friend void protobuf_AssignDesc_encoder_2eproto();
  friend void protobuf_ShutdownFile_encoder_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Encoders_alias> Encoders_alias_default_instance_;

// -------------------------------------------------------------------

class Encoders_limit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Encoders.limit) */ {
 public:
  Encoders_limit();
  virtual ~Encoders_limit();

  Encoders_limit(const Encoders_limit& from);

  inline Encoders_limit& operator=(const Encoders_limit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Encoders_limit& default_instance();

  static const Encoders_limit* internal_default_instance();

  void Swap(Encoders_limit* other);

  // implements Message ----------------------------------------------

  inline Encoders_limit* New() const { return New(NULL); }

  Encoders_limit* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Encoders_limit& from);
  void MergeFrom(const Encoders_limit& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Encoders_limit* other);
  void UnsafeMergeFrom(const Encoders_limit& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string min = 2;
  void clear_min();
  static const int kMinFieldNumber = 2;
  const ::std::string& min() const;
  void set_min(const ::std::string& value);
  void set_min(const char* value);
  void set_min(const char* value, size_t size);
  ::std::string* mutable_min();
  ::std::string* release_min();
  void set_allocated_min(::std::string* min);

  // optional string max = 3;
  void clear_max();
  static const int kMaxFieldNumber = 3;
  const ::std::string& max() const;
  void set_max(const ::std::string& value);
  void set_max(const char* value);
  void set_max(const char* value, size_t size);
  ::std::string* mutable_max();
  ::std::string* release_max();
  void set_allocated_max(::std::string* max);

  // optional string value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string range = 5;
  void clear_range();
  static const int kRangeFieldNumber = 5;
  const ::std::string& range() const;
  void set_range(const ::std::string& value);
  void set_range(const char* value);
  void set_range(const char* value, size_t size);
  ::std::string* mutable_range();
  ::std::string* release_range();
  void set_allocated_range(::std::string* range);

  // @@protoc_insertion_point(class_scope:Encoders.limit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr min_;
  ::google::protobuf::internal::ArenaStringPtr max_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr range_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_encoder_2eproto_impl();
  friend void  protobuf_AddDesc_encoder_2eproto_impl();
  friend void protobuf_AssignDesc_encoder_2eproto();
  friend void protobuf_ShutdownFile_encoder_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Encoders_limit> Encoders_limit_default_instance_;

// -------------------------------------------------------------------

class Encoders_mediaCodec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Encoders.mediaCodec) */ {
 public:
  Encoders_mediaCodec();
  virtual ~Encoders_mediaCodec();

  Encoders_mediaCodec(const Encoders_mediaCodec& from);

  inline Encoders_mediaCodec& operator=(const Encoders_mediaCodec& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Encoders_mediaCodec& default_instance();

  static const Encoders_mediaCodec* internal_default_instance();

  void Swap(Encoders_mediaCodec* other);

  // implements Message ----------------------------------------------

  inline Encoders_mediaCodec* New() const { return New(NULL); }

  Encoders_mediaCodec* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Encoders_mediaCodec& from);
  void MergeFrom(const Encoders_mediaCodec& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Encoders_mediaCodec* other);
  void UnsafeMergeFrom(const Encoders_mediaCodec& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .Encoders.alias Alias = 3;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 3;
  const ::Encoders_alias& alias() const;
  ::Encoders_alias* mutable_alias();
  ::Encoders_alias* release_alias();
  void set_allocated_alias(::Encoders_alias* alias);

  // repeated .Encoders.limit Limit = 4;
  int limit_size() const;
  void clear_limit();
  static const int kLimitFieldNumber = 4;
  const ::Encoders_limit& limit(int index) const;
  ::Encoders_limit* mutable_limit(int index);
  ::Encoders_limit* add_limit();
  ::google::protobuf::RepeatedPtrField< ::Encoders_limit >*
      mutable_limit();
  const ::google::protobuf::RepeatedPtrField< ::Encoders_limit >&
      limit() const;

  // @@protoc_insertion_point(class_scope:Encoders.mediaCodec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Encoders_limit > limit_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::Encoders_alias* alias_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_encoder_2eproto_impl();
  friend void  protobuf_AddDesc_encoder_2eproto_impl();
  friend void protobuf_AssignDesc_encoder_2eproto();
  friend void protobuf_ShutdownFile_encoder_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Encoders_mediaCodec> Encoders_mediaCodec_default_instance_;

// -------------------------------------------------------------------

class Encoders : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Encoders) */ {
 public:
  Encoders();
  virtual ~Encoders();

  Encoders(const Encoders& from);

  inline Encoders& operator=(const Encoders& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Encoders& default_instance();

  static const Encoders* internal_default_instance();

  void Swap(Encoders* other);

  // implements Message ----------------------------------------------

  inline Encoders* New() const { return New(NULL); }

  Encoders* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Encoders& from);
  void MergeFrom(const Encoders& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Encoders* other);
  void UnsafeMergeFrom(const Encoders& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Encoders_alias alias;
  typedef Encoders_limit limit;
  typedef Encoders_mediaCodec mediaCodec;

  // accessors -------------------------------------------------------

  // repeated .Encoders.mediaCodec MediaCodec = 1;
  int mediacodec_size() const;
  void clear_mediacodec();
  static const int kMediaCodecFieldNumber = 1;
  const ::Encoders_mediaCodec& mediacodec(int index) const;
  ::Encoders_mediaCodec* mutable_mediacodec(int index);
  ::Encoders_mediaCodec* add_mediacodec();
  ::google::protobuf::RepeatedPtrField< ::Encoders_mediaCodec >*
      mutable_mediacodec();
  const ::google::protobuf::RepeatedPtrField< ::Encoders_mediaCodec >&
      mediacodec() const;

  // @@protoc_insertion_point(class_scope:Encoders)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Encoders_mediaCodec > mediacodec_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_encoder_2eproto_impl();
  friend void  protobuf_AddDesc_encoder_2eproto_impl();
  friend void protobuf_AssignDesc_encoder_2eproto();
  friend void protobuf_ShutdownFile_encoder_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Encoders> Encoders_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Encoders_alias

// optional string name = 1;
inline void Encoders_alias::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Encoders_alias::name() const {
  // @@protoc_insertion_point(field_get:Encoders.alias.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoders_alias::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Encoders.alias.name)
}
inline void Encoders_alias::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Encoders.alias.name)
}
inline void Encoders_alias::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Encoders.alias.name)
}
inline ::std::string* Encoders_alias::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Encoders.alias.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Encoders_alias::release_name() {
  // @@protoc_insertion_point(field_release:Encoders.alias.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoders_alias::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Encoders.alias.name)
}

inline const Encoders_alias* Encoders_alias::internal_default_instance() {
  return &Encoders_alias_default_instance_.get();
}
// -------------------------------------------------------------------

// Encoders_limit

// optional string name = 1;
inline void Encoders_limit::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Encoders_limit::name() const {
  // @@protoc_insertion_point(field_get:Encoders.limit.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoders_limit::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Encoders.limit.name)
}
inline void Encoders_limit::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Encoders.limit.name)
}
inline void Encoders_limit::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Encoders.limit.name)
}
inline ::std::string* Encoders_limit::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Encoders.limit.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Encoders_limit::release_name() {
  // @@protoc_insertion_point(field_release:Encoders.limit.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoders_limit::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Encoders.limit.name)
}

// optional string min = 2;
inline void Encoders_limit::clear_min() {
  min_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Encoders_limit::min() const {
  // @@protoc_insertion_point(field_get:Encoders.limit.min)
  return min_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoders_limit::set_min(const ::std::string& value) {
  
  min_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Encoders.limit.min)
}
inline void Encoders_limit::set_min(const char* value) {
  
  min_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Encoders.limit.min)
}
inline void Encoders_limit::set_min(const char* value, size_t size) {
  
  min_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Encoders.limit.min)
}
inline ::std::string* Encoders_limit::mutable_min() {
  
  // @@protoc_insertion_point(field_mutable:Encoders.limit.min)
  return min_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Encoders_limit::release_min() {
  // @@protoc_insertion_point(field_release:Encoders.limit.min)
  
  return min_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoders_limit::set_allocated_min(::std::string* min) {
  if (min != NULL) {
    
  } else {
    
  }
  min_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), min);
  // @@protoc_insertion_point(field_set_allocated:Encoders.limit.min)
}

// optional string max = 3;
inline void Encoders_limit::clear_max() {
  max_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Encoders_limit::max() const {
  // @@protoc_insertion_point(field_get:Encoders.limit.max)
  return max_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoders_limit::set_max(const ::std::string& value) {
  
  max_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Encoders.limit.max)
}
inline void Encoders_limit::set_max(const char* value) {
  
  max_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Encoders.limit.max)
}
inline void Encoders_limit::set_max(const char* value, size_t size) {
  
  max_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Encoders.limit.max)
}
inline ::std::string* Encoders_limit::mutable_max() {
  
  // @@protoc_insertion_point(field_mutable:Encoders.limit.max)
  return max_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Encoders_limit::release_max() {
  // @@protoc_insertion_point(field_release:Encoders.limit.max)
  
  return max_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoders_limit::set_allocated_max(::std::string* max) {
  if (max != NULL) {
    
  } else {
    
  }
  max_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), max);
  // @@protoc_insertion_point(field_set_allocated:Encoders.limit.max)
}

// optional string value = 4;
inline void Encoders_limit::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Encoders_limit::value() const {
  // @@protoc_insertion_point(field_get:Encoders.limit.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoders_limit::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Encoders.limit.value)
}
inline void Encoders_limit::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Encoders.limit.value)
}
inline void Encoders_limit::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Encoders.limit.value)
}
inline ::std::string* Encoders_limit::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Encoders.limit.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Encoders_limit::release_value() {
  // @@protoc_insertion_point(field_release:Encoders.limit.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoders_limit::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Encoders.limit.value)
}

// optional string range = 5;
inline void Encoders_limit::clear_range() {
  range_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Encoders_limit::range() const {
  // @@protoc_insertion_point(field_get:Encoders.limit.range)
  return range_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoders_limit::set_range(const ::std::string& value) {
  
  range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Encoders.limit.range)
}
inline void Encoders_limit::set_range(const char* value) {
  
  range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Encoders.limit.range)
}
inline void Encoders_limit::set_range(const char* value, size_t size) {
  
  range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Encoders.limit.range)
}
inline ::std::string* Encoders_limit::mutable_range() {
  
  // @@protoc_insertion_point(field_mutable:Encoders.limit.range)
  return range_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Encoders_limit::release_range() {
  // @@protoc_insertion_point(field_release:Encoders.limit.range)
  
  return range_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoders_limit::set_allocated_range(::std::string* range) {
  if (range != NULL) {
    
  } else {
    
  }
  range_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), range);
  // @@protoc_insertion_point(field_set_allocated:Encoders.limit.range)
}

inline const Encoders_limit* Encoders_limit::internal_default_instance() {
  return &Encoders_limit_default_instance_.get();
}
// -------------------------------------------------------------------

// Encoders_mediaCodec

// optional string name = 1;
inline void Encoders_mediaCodec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Encoders_mediaCodec::name() const {
  // @@protoc_insertion_point(field_get:Encoders.mediaCodec.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoders_mediaCodec::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Encoders.mediaCodec.name)
}
inline void Encoders_mediaCodec::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Encoders.mediaCodec.name)
}
inline void Encoders_mediaCodec::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Encoders.mediaCodec.name)
}
inline ::std::string* Encoders_mediaCodec::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Encoders.mediaCodec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Encoders_mediaCodec::release_name() {
  // @@protoc_insertion_point(field_release:Encoders.mediaCodec.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoders_mediaCodec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Encoders.mediaCodec.name)
}

// optional string type = 2;
inline void Encoders_mediaCodec::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Encoders_mediaCodec::type() const {
  // @@protoc_insertion_point(field_get:Encoders.mediaCodec.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoders_mediaCodec::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Encoders.mediaCodec.type)
}
inline void Encoders_mediaCodec::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Encoders.mediaCodec.type)
}
inline void Encoders_mediaCodec::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Encoders.mediaCodec.type)
}
inline ::std::string* Encoders_mediaCodec::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:Encoders.mediaCodec.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Encoders_mediaCodec::release_type() {
  // @@protoc_insertion_point(field_release:Encoders.mediaCodec.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Encoders_mediaCodec::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Encoders.mediaCodec.type)
}

// optional .Encoders.alias Alias = 3;
inline bool Encoders_mediaCodec::has_alias() const {
  return this != internal_default_instance() && alias_ != NULL;
}
inline void Encoders_mediaCodec::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) delete alias_;
  alias_ = NULL;
}
inline const ::Encoders_alias& Encoders_mediaCodec::alias() const {
  // @@protoc_insertion_point(field_get:Encoders.mediaCodec.Alias)
  return alias_ != NULL ? *alias_
                         : *::Encoders_alias::internal_default_instance();
}
inline ::Encoders_alias* Encoders_mediaCodec::mutable_alias() {
  
  if (alias_ == NULL) {
    alias_ = new ::Encoders_alias;
  }
  // @@protoc_insertion_point(field_mutable:Encoders.mediaCodec.Alias)
  return alias_;
}
inline ::Encoders_alias* Encoders_mediaCodec::release_alias() {
  // @@protoc_insertion_point(field_release:Encoders.mediaCodec.Alias)
  
  ::Encoders_alias* temp = alias_;
  alias_ = NULL;
  return temp;
}
inline void Encoders_mediaCodec::set_allocated_alias(::Encoders_alias* alias) {
  delete alias_;
  alias_ = alias;
  if (alias) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Encoders.mediaCodec.Alias)
}

// repeated .Encoders.limit Limit = 4;
inline int Encoders_mediaCodec::limit_size() const {
  return limit_.size();
}
inline void Encoders_mediaCodec::clear_limit() {
  limit_.Clear();
}
inline const ::Encoders_limit& Encoders_mediaCodec::limit(int index) const {
  // @@protoc_insertion_point(field_get:Encoders.mediaCodec.Limit)
  return limit_.Get(index);
}
inline ::Encoders_limit* Encoders_mediaCodec::mutable_limit(int index) {
  // @@protoc_insertion_point(field_mutable:Encoders.mediaCodec.Limit)
  return limit_.Mutable(index);
}
inline ::Encoders_limit* Encoders_mediaCodec::add_limit() {
  // @@protoc_insertion_point(field_add:Encoders.mediaCodec.Limit)
  return limit_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Encoders_limit >*
Encoders_mediaCodec::mutable_limit() {
  // @@protoc_insertion_point(field_mutable_list:Encoders.mediaCodec.Limit)
  return &limit_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Encoders_limit >&
Encoders_mediaCodec::limit() const {
  // @@protoc_insertion_point(field_list:Encoders.mediaCodec.Limit)
  return limit_;
}

inline const Encoders_mediaCodec* Encoders_mediaCodec::internal_default_instance() {
  return &Encoders_mediaCodec_default_instance_.get();
}
// -------------------------------------------------------------------

// Encoders

// repeated .Encoders.mediaCodec MediaCodec = 1;
inline int Encoders::mediacodec_size() const {
  return mediacodec_.size();
}
inline void Encoders::clear_mediacodec() {
  mediacodec_.Clear();
}
inline const ::Encoders_mediaCodec& Encoders::mediacodec(int index) const {
  // @@protoc_insertion_point(field_get:Encoders.MediaCodec)
  return mediacodec_.Get(index);
}
inline ::Encoders_mediaCodec* Encoders::mutable_mediacodec(int index) {
  // @@protoc_insertion_point(field_mutable:Encoders.MediaCodec)
  return mediacodec_.Mutable(index);
}
inline ::Encoders_mediaCodec* Encoders::add_mediacodec() {
  // @@protoc_insertion_point(field_add:Encoders.MediaCodec)
  return mediacodec_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Encoders_mediaCodec >*
Encoders::mutable_mediacodec() {
  // @@protoc_insertion_point(field_mutable_list:Encoders.MediaCodec)
  return &mediacodec_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Encoders_mediaCodec >&
Encoders::mediacodec() const {
  // @@protoc_insertion_point(field_list:Encoders.MediaCodec)
  return mediacodec_;
}

inline const Encoders* Encoders::internal_default_instance() {
  return &Encoders_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_encoder_2eproto__INCLUDED
